#!/usr/bin/env node

var cp   = require('child_process')
var cpus = require('os').cpus
var fs   = require('fs')
var path = require('path')

var manager = require('download-manager')


const DEPS='deps'
const JOBS = cpus().length


var targetList =
[
  'arm-softmmu',
  'i386-softmmu',
  'x86_64-softmmu'
]

if(process.platform === 'linux')
  targetList = targetList.concat(
  [
    'arm-linux-user',
    'i386-linux-user',
    'x86_64-linux-user'
  ])


// Source versions

const INIT_VERSION = "master"
const NODEJS_VERSION = "v4.4.0"
const PKGCONFIG_VERSION = "0.29.1"
const QEMU_VERSION = "raspi"


// Source URLs

const INIT_URL="https://github.com/piranna/nodeos-init/archive/"+INIT_VERSION+".tar.gz"
const NODEJS_URL="http://nodejs.org/dist/"+NODEJS_VERSION+"/node-"+NODEJS_VERSION+".tar.gz"
const PKGCONFIG_URL="http://pkgconfig.freedesktop.org/releases/pkg-config-"+PKGCONFIG_VERSION+".tar.gz"
const QEMU_URL="https://github.com/0xabu/qemu/archive/"+QEMU_VERSION+".tar.gz"


// Checksums

const NODEJS_SHA256 = '2cfc76292576d17a8f2434329221675972c96e5fd60cd694610f53134079f92e'


//
// Node.js
//

var downloads =
[
  {
    name: 'init',
    url: INIT_URL
  },
  {
    name: 'node',
    url: NODEJS_URL,
    sha256: NODEJS_SHA256,
    action: function(callback)
    {
      // Allow to inspect NodeOS version from inside Node.js
      try
      {
        var version = require('../../../package.json').version
      }
      catch(e)
      {
        var version = '(unknown)'
      }
      var data = "exports.nodeos = '"+version+"'"

      fs.appendFile(path.join(DEPS, this.name, 'lib/os.js'), data, callback)
    }
  },
  // {
  //   name: 'pkg-config',
  //   url: PKGCONFIG_URL,
  //   action: function(callback)
  //   {
  //     var args =
  //     [
  //       '--prefix='+path.resolve('usr'),
  //       '--with-internal-glib'
  //     ]
  //
  //     var options =
  //     {
  //       cwd: path.join(DEPS, this.name),
  //       stdio: ['ignore', 'ignore', process.stderr]
  //     }
  //
  //     cp.execFile('./configure', args, options, function(error)
  //     {
  //       if(error) return callback(error)
  //
  //       cp.spawn('make', ['-j'+JOBS, 'install'], options)
  //       .on('exit', callback)
  //     })
  //   }
  // },
  // {
  //   name: 'qemu',
  //   url: QEMU_URL,
  //   action: function(callback)
  //   {
  //     var env = process.env
  //     env.PATH = path.join('usr','bin')+':'+env.PATH
  //
  //     var options =
  //     {
  //       cwd: path.join(DEPS, this.name),
  //       stdio: ['ignore', 'ignore', process.stderr]
  //     }
  //
  //     var args = ['clone','git://git.qemu-project.org/dtc.git']
  //
  //     cp.spawn('git', args, options)
  //     .on('exit', function(error)
  //     {
  //       if(error) return callback(error)
  //
  //       var args =
  //       [
  //         '--prefix='+path.resolve('usr'),
  //         '--target-list='+targetList.join(','),
  //         '--disable-docs',
  //         '--disable-vnc'
  //       ]
  //
  //       if(process.platform !== 'darwin') args.push('--enable-sdl')
  //
  //       cp.execFile('./configure', args, options, function(error)
  //       {
  //         if(error) return callback(error)
  //
  //         cp.spawn('make', ['-j'+JOBS], options)
  //         .on('exit', function(error)
  //         {
  //           if(error) return callback(error)
  //
  //           cp.spawn('make', ['install'], options)
  //           .on('exit', callback)
  //         })
  //       })
  //     })
  //   }
  // }
]


manager(downloads, {path: DEPS}, function(error)
{
  if(error)
  {
    console.error(error)
    process.exit(1)
  }
})
