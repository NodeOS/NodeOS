#!/usr/bin/env node

var suppose = require('suppose')

var processArguments = require('./processArguments')


const QEMU = require('qemu')+'/bin/qemu-'
const TIMEOUT = 15


var args = processArguments(process.argv.slice(2))

var cpu = args.cpu

var exe
var timeout = setTimeout(function()
{
  exe.kill()

  console.error('Timeout while waiting an answer')
  process.exit(-2)
}, TIMEOUT*1000)


// [Hack] Can't be able to use x86_64 as generic x86 64 bits CPU
var toolchainCpu = (cpu === 'nocona') ? 'x86_64' : cpu

const LD_LIBRARY_PATH = '../nodeos-cross-toolchain/out/'+toolchainCpu+'-nodeos-linux-'+args.libc+'/lib'

process.env.LD_LIBRARY_PATH = LD_LIBRARY_PATH
var command = QEMU+args.cpu_family
var args = [LD_LIBRARY_PATH+'/libc.so', 'obj/'+cpu+'/node', '--interactive']
//var args = ['-cpu', 'arm1176', LD_LIBRARY_PATH+'/libc.so', 'obj/'+cpu+'/node', '--interactive']

exe = suppose(command, args)
//  .debug(process.stderr)
  .when(/> /).respond('setTimeout(console.log, 1000, "this is","a test")\n')
  .when(/this is a test/, function(exe)
  {
    exe.kill()
  })
  .on('error', function(error)
  {
    if(error.message.indexOf('terminating on signal 15 from pid') < 0)
      console.trace(error)
  })
  .end(function()
  {
    clearTimeout(timeout)

    var expects = this.expects.length
    if(expects) process.exit(expects)
  })
