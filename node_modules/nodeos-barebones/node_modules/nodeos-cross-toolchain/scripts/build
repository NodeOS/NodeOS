#!/usr/bin/env bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

set +h
umask 022
export LC_ALL=POSIX
unset CFLAGS


DEPS=`pwd`/deps
TOOLS=`pwd`/out

source scripts/adjustEnvVars.sh || exit $?


mkdir -p  $TOOLS/$TARGET     &&
ln -sfn . $TOOLS/$TARGET/usr || exit 1

if [[ $BITS = 64 ]]; then
  ln -sfn lib $TOOLS/$TARGET/lib64 || exit 2
fi


#
# Linux kernel headers
#

SRC_DIR=$DEPS/linux
OBJ_DIR=$TOOLS/$TARGET/include/linux

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Extracting Linux headers${CLR}"

  export C_INCLUDE_PATH=`pwd`/include:$C_INCLUDE_PATH

  (
    cd $SRC_DIR

    # Extract headers
    $MAKE mrproper                                                   &&
    $MAKE ARCH=$ARCH headers_check                                   &&
    $MAKE ARCH=$ARCH INSTALL_HDR_PATH=$TOOLS/$TARGET headers_install || exit 10
  ) || err $?

  echo -e "${GRN}Successfully extracted Linux headers${CLR}"
fi


#
# binutils
#

SRC_DIR=$DEPS/binutils
OBJ_DIR=$OBJECTS/binutils

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Compiling binutils${CLR}"

  mkdir -p $OBJ_DIR || exit 20

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                \
        --silent                      \
        --prefix=$TOOLS               \
        --target=$TARGET              \
        --with-sysroot=$TOOLS/$TARGET \
        --disable-werror              \
        --disable-nls                 \
        --disable-multilib            || exit 21

    # Compile
    $MAKE configure-host && $MAKE || exit 22

    # Install
    $MAKE install || exit 23
  ) || err $?

  echo -e "${GRN}Successfully compiled binutils${CLR}"
fi


#
# gcc static
#

SRC_DIR=$DEPS/gcc
OBJ_DIR=$OBJECTS/gcc

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Compiling GCC static${CLR}"

  mkdir -p $OBJ_DIR || exit 30

  # Remove old musl object files
  rm -rf $OBJECTS/musl || exit 31

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                        \
        --silent                              \
        --prefix=$TOOLS                       \
        --build=$HOST                         \
        --host=$HOST                          \
        --target=$TARGET                      \
        --with-sysroot=$TOOLS/$TARGET         \
        --disable-nls                         \
        --disable-shared                      \
        --disable-target-libsanitizer         \
        --disable-libsanitizer                \
        --without-headers                     \
        --with-newlib                         \
        --disable-decimal-float               \
        --disable-libgomp                     \
        --disable-libmudflap                  \
        --disable-libssp                      \
        --disable-libatomic                   \
        --disable-libquadmath                 \
        --disable-threads                     \
        --disable-multilib                    \
        --with-mpfr-include=$SRC_DIR/mpfr/src \
        --with-mpfr-lib=`pwd`/mpfr/src/.libs  \
        --with-arch=$CPU                      \
        --with-float=$FLOAT_ABI               \
        --with-fpu=$FPU                       \
        --enable-languages=c                  || exit 32
#        -mtune=$TUNE                          \

    # Compile
    $MAKE all-gcc all-target-libgcc || exit 33

    # Install
    $MAKE install-gcc install-target-libgcc || exit 34
  ) || err $?

  # Remove object files to allow generation of final version
  # [ToDo] Check if we can be able to generate them on different folders
  rm -rf $OBJ_DIR || exit 35

  echo -e "${GRN}Successfully compiled GCC static${CLR}"
fi


#
# musl
#

SRC_DIR=$DEPS/musl
OBJ_DIR=$OBJECTS/musl

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Compiling musl${CLR}"

  mkdir -p $OBJ_DIR || exit 40

  (
#    cd $OBJ_DIR
    cd $SRC_DIR && $MAKE clean  # musl don't support out-of-tree builds yet

    # Configure
    CROSS_COMPILE="$TARGET-" \
    $SRC_DIR/configure       \
        --silent             \
        --prefix=/           \
        --target=$TARGET     \
        --disable-static     || exit 41

    # Compile
    CROSS_COMPILE="$TARGET-" $MAKE || exit 42

    # Install
    DESTDIR=$TOOLS/$TARGET $MAKE install || exit 43
  ) || err $?

  echo -e "${GRN}Successfully compiled musl${CLR}"
fi


#
# gcc final
#

SRC_DIR=$DEPS/gcc
OBJ_DIR=$OBJECTS/gcc

if [[ ! -d $OBJ_DIR ]]; then
  echo -e "${WHT}Compiling GCC final${CLR}"

  mkdir -p $OBJ_DIR || exit 50

  (
    cd $OBJ_DIR

    # Configure
    $SRC_DIR/configure                        \
        --silent                              \
        --prefix=$TOOLS                       \
        --build=$HOST                         \
        --host=$HOST                          \
        --target=$TARGET                      \
        --with-sysroot=$TOOLS/$TARGET         \
        --disable-nls                         \
        --disable-static                      \
        --enable-c99                          \
        --enable-long-long                    \
        --disable-libmudflap                  \
        --disable-target-libsanitizer         \
        --disable-libsanitizer                \
        --disable-multilib                    \
        --with-mpfr-include=$SRC_DIR/mpfr/src \
        --with-mpfr-lib=`pwd`/mpfr/src/.libs  \
        --with-arch=$CPU                      \
        --with-float=$FLOAT_ABI               \
        --with-fpu=$FPU                       \
        --enable-languages=c,c++              || exit 51
#        -mtune=$TUNE                          \

    # Compile
    $MAKE || exit 52

    # Install
    $MAKE install || exit 53
  ) || err $?

  echo -e "${GRN}Successfully compiled GCC final${CLR}"
fi


rm -rf $TOOLS/include || exit 60
