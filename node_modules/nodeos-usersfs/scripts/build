#!/usr/bin/env bash

# This script prepares the users filesystem

GRN="\e[32m"
CLR="\e[0m"


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`
BAREBONES=`node -p "require('nodeos-barebones')"`
INITRAMFS=`node -p "require('nodeos-initramfs')"`

NODE_DIR=$BAREBONES/node_modules/nodejs

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source $INITRAMFS/scripts/utils.sh         || exit $?

PATH=$TOOLCHAIN/bin:$PATH


# Clean object dir and return the input error
function err(){
  rmStep $STEP_DIR
  exit $1
}


#
# Define steps paths
#

OBJ_ROOT=$OBJECTS/root
OBJ_NODEOS=$OBJECTS/nodeos
OUT_DIR=`pwd`/out/$CPU


#
# root home
#

STEP_DIR=$OBJ_ROOT

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Generating root user folder${CLR}"

  # Force re-creation of usersfs
  rm -rf $OUT_DIR || exit 14

  (
    mkdir -p $STEP_DIR || exit 10

    #
    # Install system dependencies
    #

    eval "$NPMi" -g `grep -v "^#" packages_root.txt` || exit 11


    #
    # Services to be started at boot
    #

    mkdir -p $STEP_DIR/etc                 &&
    cp forever-starter.json $STEP_DIR/etc/ || exit 12


    #
    # Init file for the user
    #

    ln -sf bin/forever-starter $STEP_DIR/init || exit 13
  ) || err $?

  echo -e "${GRN}Successfully generated root user folder${CLR}"
fi


#
# nodeos home
#

STEP_DIR=$OBJ_NODEOS

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Generating nodeos user folder${CLR}"

  # Force re-creation of usersfs
  rm -rf $OUT_DIR || exit 25

  (
    mkdir -p $STEP_DIR || exit 20

    #
    # Install user dependencies
    #

    eval "$NPMi" -g `grep -v "^#" packages_nodeos.txt` || exit 21


    #
    # Copy nodeos user login info
    #

    mkdir -p $STEP_DIR/etc        &&
    cp logon.json  $STEP_DIR/etc/ || exit 22


    #
    # Dummy init file for the user
    #

    cp init.js $STEP_DIR/init || exit 23


    #
    # blessed-contrib examples
    #

    BLESSED_URL=https://github.com/yaronn/blessed-contrib/archive/master.tar.gz
    SRC_DIR=$STEP_DIR/blessed-contrib

    mkdir -p $SRC_DIR                                                 &&
    curl -L $BLESSED_URL | tar xzf - -C $SRC_DIR --strip-components=1 &&
    (
      cd $SRC_DIR

      eval "$NPMi" || exit 24
    ) || exit $?


    # #
    # # node-canvas examples
    # #
    #
    # CANVAS_URL=https://github.com/NodeOS/node-canvas/archive/master.tar.gz
    # SRC_DIR=$OBJ_DIR/node-canvas
    #
    # mkdir -p $SRC_DIR                                                &&
    # curl -L $CANVAS_URL | tar xzf - -C $SRC_DIR --strip-components=1 &&
    # (
    #   cd $SRC_DIR
    #
    #   eval "$NPMi" --has_cairo=false --has_X11=false || exit 25
    # ) || exit $?
  ) || err $?

  echo -e "${GRN}Successfully generated nodeos user folder${CLR}"
fi


#
# Wrap the system up and pack it
#

if [[ ! -e $OUT_DIR ]]; then
  mkdir -p `dirname $OUT_DIR`

  case $PLATFORM in
    docker|vagga)
      cp $BAREBONES/out/latest out/barebones.tar || exit 30
      cp $INITRAMFS/out/latest out/initramfs.tar || exit 31

      chmod -R go= "$OBJECTS" || exit 32

      ln -sf ../build/$CPU out/latest || exit 33
    ;;

    pc_* | raspberry_*)
      DISK_SIZE=512  # Size in MB

      genext2fs -b $((DISK_SIZE*1024)) \
          --root $OBJECTS              \
          --block-size          1024   \
          --bytes-per-inode     4096   \
          --reserved-percentage    0   \
          --creator-os linux           \
          --allow-holes                \
          --squash $OUT_DIR            || exit 40

      /sbin/tune2fs -j $OUT_DIR > /dev/null || exit 41
      debugfs.chown    $OUT_DIR nodeos 1    || exit 42

      ln -sf $CPU out/latest || exit 43
    ;;

    *)
      echo -e "${RED}Unknown platform '$PLATFORM'${CLR}"
      exit 50
    ;;
  esac
fi


echo -e "${GRN}Successfully built Layer-3 image 'usersfs'${CLR}"
