#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
INITRAMFS=`pwd`/../nodeos-initramfs

NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=`pwd`/../nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -d $OBJECTS ]]; then
  chmod -R u+w $OBJECTS &&
  rm    -rf    $OBJECTS || exit 10
fi


#
# SysLinux
#

SRC_DIR=`pwd`/deps/syslinux
OBJ_DIR=`pwd`/obj/efiboot
EFIBOOT_IMG=`pwd`/obj/efiboot.img


#
# Wrap the system up and pack it
#

GENFATFS=../../node_modules/genfatfs/genfatfs

function createPartitionImage() {
  # Copy kernel and initramfs on the partition image

  cp $BAREBONES/out/latest $OBJECTS/kernel.img &&
  cp $INITRAMFS/out/latest $OBJECTS/initram.gz || exit 20

  # Create partition image

  OUT_DIR=$OUT_DIR/img
  mkdir -p `dirname $OUT_DIR`

  # Size in MB
#    DISK_SIZE=`du -ks $OBJECTS | cut -f1`
  DISK_SIZE=$((16*1024))

  $GENFATFS -b $DISK_SIZE \
      --root $OBJECTS     \
      $OUT_DIR            || exit 21
}

function createEfiImage() {
  rm -rf $OBJ_DIR   &&
  mkdir -p $OBJ_DIR || exit 30

  cp syslinux.cfg $OBJ_DIR || exit 31

  # Copy kernel and initramfs on the ISO image

  cp $BAREBONES/out/latest $OBJ_DIR/kernel.img &&
  cp $INITRAMFS/out/latest $OBJ_DIR/initram.gz || exit 32

  # Copy SysLinux files

  cp $SRC_DIR/efi$BITS/efi/syslinux.efi                     \
     $SRC_DIR/efi$BITS/com32/elflink/ldlinux/ldlinux.e$BITS \
     $OBJ_DIR                                               || exit 33

  # Create EFI disk image

#    DISK_SIZE=`du -ks $OBJECTS | cut -f1`
  DISK_SIZE=$((16*1024))

  $GENFATFS -b $DISK_SIZE \
    --root $OBJ_DIR       \
    $EFIBOOT_IMG          || exit 34
}

function createIsoImage() {
  # Create EFI boot image
  createEfiImage           || exit $?
  cp $EFIBOOT_IMG $OBJECTS || exit 40

  # Copy kernel and initramfs on the ISO image

  cp $BAREBONES/out/latest $OBJECTS/kernel.img &&
  cp $INITRAMFS/out/latest $OBJECTS/initram.gz || exit 41

  # Copy IsoLinux files

  cp $SRC_DIR/bios/core/isolinux.bin                 \
     $SRC_DIR/bios/com32/elflink/ldlinux/ldlinux.c32 \
     $OBJECTS                                        || exit 42

  # Create ISO image

  OUT_DIR=$OUT_DIR/iso
  mkdir -p `dirname $OUT_DIR`

  # http://wiki.osdev.org/Bootable_El-Torito_CD_with_GRUB_Legacy#Mkisofs_says_Uh_oh.2C_I_cant_find_the_boot_image
  # genisoimage looks for its boot image as a subdirectory of the filesystem on the CD
  genisoimage -o $OUT_DIR \
    -c boot.cat           \
    -V NodeOS             \
    -b isolinux.bin       \
      -no-emul-boot       \
      -boot-load-size 4   \
      -boot-info-table    \
    -eltorito-alt-boot    \
    -efi-boot efiboot.img \
      -no-emul-boot       \
    $OBJECTS              || exit 43

  $SRC_DIR/bios/utils/isohybrid $OUT_DIR || exit 44
}


case $PLATFORM in
  docker|vagga)
    mkdir -p `dirname $OUT_DIR`

    cp $BAREBONES/out/latest out/barebones.tar || exit 50
    cp $INITRAMFS/out/latest out/initramfs.tar || exit 51
  ;;

  pc_iso)
    cp syslinux.cfg $OBJECTS || exit 52

    createIsoImage || exit $?

    ln -sf $CPU/iso out/latest || exit 53
  ;;

  raspberry_image)
    # Copy Raspberry PI extra files
    # http://elinux.org/RPi_Advanced_Setup#Setting_up_the_boot_partition
    #
    # bootcode.bin, start.elf, cmdline.txt

    createPartitionImage || exit $?

    ln -sf $CPU/img out/latest || exit 54
  ;;

  *_qemu);;  # QEmu don't need a rootfs image

  *)
    echo -e "${RED}Unknown platform '$PLATFORM'${CLR}"
    exit 55
  ;;
esac


echo -e "${GRN}Successfully built 'rootfs'${CLR}"
