#!/usr/bin/env node

var join = require('path').join
var fs   = require('fs')

var suppose = require('suppose')

var processArguments = require('nodeos-barebones/scripts/processArguments')


const TIMEOUT = 300  // seconds


var link = fs.readlinkSync('out/latest').split('/');

var cpu_family = link[link.length-3]
var machine    = link[link.length-2]
var platform   = link[link.length-1]

var type = platform.split('_')[1] || platform

var args = processArguments(process.argv.slice(2))

var cpu = args.cpu

var exe
var timeout = setTimeout(function()
{
  exe.kill()

  console.error('Timeout while waiting an answer')
  process.exit(-2)
}, TIMEOUT*1000)


var command = 'qemu-system-'+args.cpu_family

var args =
[
  '-machine', machine,
//  '-enable-kvm',
  '-m', '256M',
  '-nographic',
]

const outDir = join('out', cpu_family, machine, platform)
switch(type)
{
  case 'docker':
    command = 'docker'
    args =
    [
      'run', '-t',
      '--cap-add', 'SYS_ADMIN',
      '--security-opt=apparmor:unconfined',
      '--device', '/dev/fuse',
      'nodeos/initramfs'
    ]
  break

  case 'img':
    args.push('-hda', join(outDir, 'bootfs.img'),
              '-hdb', join(outDir, 'usersfs.img'))
  break

  case 'iso':
    args.push('-cdrom', join(outDir, 'bootfs.iso'),
              '-hda'  , join(outDir, 'usersfs.img'))
  break

  case 'qemu':
    var append =
    [
      'root=/dev/sda',
      'console=ttyS0'
    ]

    args.push('--kernel', join(outDir, 'kernel'),
              '--initrd', join(outDir, 'initramfs.cpio.gz'),
              '-drive',   `file=${join(outDir, 'usersfs.img')},format=raw,index=0`,
              '-append',  append.join(' '))
  break

  case 'tar':
    fs.accessSync(join(outDir, 'bootfs.tar.gz'))
    fs.accessSync(join(outDir, 'usersfs.tar.gz'))
    process.exit()
  break

  case 'vagga':
    fs.accessSync(join(outDir, 'barebones.tar.gz'))
    fs.accessSync(join(outDir, 'initramfs.tar.gz'))
    fs.accessSync(join(outDir, 'usersfs.tar.gz'))
    process.exit()
  break

  default:
    throw 'Unknown platform "'+platform+'"'
}

// // check if kvm is supported
// var kvm = /(vmx|svm)/;
// var contents = "";
//
// try
// {
//   contents = fs.readFileSync('/proc/cpuinfo');
// } catch(e){
//   throw(e);
// }
//
// if(kvm.test(contents) === false)
// {
//   // disable kvm
//   console.log("Your computer does not support kvm. NodeOS will be slower without it.");
//   args.shift();
// }


// Exec test
exe = suppose(command, args, {stripAnsi: true})

// On disk images, hook on the bootloader and force kernel to output to console
if(type === 'img' || type === 'iso')
  exe.when('boot: ').respond('NodeOS console=ttyS0\n')

exe.when('username:  ')

if(type !== 'docker')
  exe.respond('nodeos\n')
  .when('password:  ').respond('nodeos\n')
//  .when('# ').respond('node\n')
//  .when('> ').respond('setTimeout(console.log, 2000, "this is","a test")\n')
//  .when(/this is a test/, function(exe)
  .when('~ > ')

exe.respond(function(exe)
{
  exe.kill()
})
.on('error', function(error)
{
  if(error.message.indexOf('terminating on signal 15 from pid') < 0)
    console.trace(error)
})
.end(function()
{
  clearTimeout(timeout)

  var expects = this.expects.length
  if(expects) process.exit(expects)
})
