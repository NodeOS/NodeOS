#!/usr/bin/env bash

BLD=$(tput bold)
GRY="\e[90m"


TOOLCHAIN=`pwd`/node_modules/nodeos-cross-toolchain

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


# Default kernel and platform
if [[ -z "$PLATFORM" ]]; then
  PLATFORM=qemu
fi


OUT_DIR=`pwd`/out/$CPU_FAMILY/$MACHINE/$PLATFORM


# Disk images are a composition of bootfs and usersfs
function createDiskImage() {
  mkdir -p `dirname $OBJECTS`

  # ToDo: sizes would need to be on cylinders and retain DOS compatibility
  # http://elinux.org/RPi_Advanced_Setup#Advanced_SD_card_setup

  BOOTFS=$OUT_DIR/bootfs
  USERSFS=$OUT_DIR/usersfs

  SIZE_MBR=$((2*1024))  # Reserve first megabyte for MBR and partitions table
  SIZE_BOOTFS=$(stat -L -c%s "$BOOTFS")
  SIZE_BOOTFS=$(($SIZE_BOOTFS/512))
  START_USERSFS=$(($SIZE_MBR+$SIZE_BOOTFS))

  dd if=/dev/zero of=$OBJECTS count=$SIZE_MBR &&
  cat $BOOTFS  >> $OBJECTS                    &&
  cat $USERSFS >> $OBJECTS                    || exit 10

  eval "echo \"$(< resources/sfdisk.txt)\"" | \
      /sbin/sfdisk -uS --force $OBJECTS || exit 11
}


if [[ ! -z "$RELEASE" ]]; then
  ZIP_FILE=prebuilds/$CPU_FAMILY-$PLATFORM.zip

  mkdir -p prebuilds
  rm -f $ZIP_FILE

  case $MACHINE in
    pc)
      case $PLATFORM in
        docker)
          cp resources/runners/README_docker.md /tmp/README.md || exit 20

          cp resources/runners/docker.sh /tmp/run.sh &&
          chmod +x /tmp/run.sh                       &&
          zip -j $ZIP_FILE /tmp/run.sh               || exit 21

          zip -j $ZIP_FILE            \
            /tmp/README.md            \
            $OUT_DIR/barebones.tar.gz \
            $OUT_DIR/initramfs.tar.gz \
            $OUT_DIR/usersfs.tar.gz   \
            resources/Dockerfile      || exit 22
        ;;

        img)
          createDiskImage || exit $?

          eval "echo -e \"$(< resources/runners/runner_header.sh)\"" > /tmp/run.sh &&
          cat resources/runners/img.sh                              >> /tmp/run.sh || exit 30

          chmod +x /tmp/run.sh         &&
          zip -j $ZIP_FILE /tmp/run.sh || exit 31

          zip -j $ZIP_FILE resources/runners/README.md || exit 32
        ;;

        iso)
          zip -j $ZIP_FILE              \
            resources/runners/README.md \
            $OUT_DIR/bootfs             \
            $OUT_DIR/usersfs            || exit 40

          eval "echo -e \"$(< resources/runners/runner_header.sh)\"" > /tmp/run.sh &&
          cat resources/runners/iso.sh                              >> /tmp/run.sh || exit 41

          chmod +x /tmp/run.sh         &&
          zip -j $ZIP_FILE /tmp/run.sh || exit 42
        ;;

        qemu)
          zip -j $ZIP_FILE              \
            resources/runners/README.md \
            $OUT_DIR/barebones          \
            $OUT_DIR/initramfs          \
            $OUT_DIR/usersfs            || exit 50

          eval "echo -e \"$(< resources/runners/runner_header.sh)\"" > /tmp/run.sh &&
          cat resources/runners/qemu.sh                             >> /tmp/run.sh || exit 51

          chmod +x /tmp/run.sh         &&
          zip -j $ZIP_FILE /tmp/run.sh || exit 52
        ;;


        *)
          echo -e "${RED}Unknown platform '$PLATFORM'${CLR}"
          exit 70
        ;;
      esac
    ;;

    raspberry_image)
      createDiskImage || exit $?

      eval "echo -e \"$(< resources/runners/runner_header.sh)\"" > /tmp/run.sh &&
      cat resources/runners/raspberry.sh                        >> /tmp/run.sh || exit 40

      chmod +x /tmp/run.sh         &&
      zip -j $ZIP_FILE /tmp/run.sh || exit 41

      zip -j $ZIP_FILE resources/runners/README.md || exit 42
    ;;

    vagga)
      cp resources/runners/README_vagga.md /tmp/README.md || exit 50

      zip -j $ZIP_FILE       \
        /tmp/README.md       \
        $OUT_DIR/barebones   \
        $OUT_DIR/initramfs   \
        $OUT_DIR/usersfs     \
        resources/vagga.yaml || exit 51
    ;;

    *)
      echo -e "${RED}Unknown machine '$MACHINE'${CLR}"
      exit 110
    ;;
  esac
fi


echo -e "${GRY}------------------------------------------${CLR}"
echo -e "${GRN}${BLD}Success!${CLR}"
echo -e "${GRN}You just built a custom NodeOS image${CLR}"
echo -e "${GRY}------------------------------------------${CLR}"
echo
echo -e "- Interactively run your image with:"

case $PLATFORM in
  docker)
    echo -e "${WHT}    npm run dockerBuild${CLR}"
    echo -e "${WHT}    npm run docker${CLR}"
    echo
    echo -e "- Share your creation with:"
    echo -e "${WHT}    docker push NodeOS${CLR}"
    echo
    echo -e "You would need administrator permissions to exec that commands"
  ;;

  vagga)
    echo -e "${WHT}    vagga run${CLR}"
  ;;

  img|iso|qemu)
    echo -e "${WHT}    npm start${CLR}"
  ;;

  *)
    echo -e "${RED}Unknown platform '$PLATFORM'${CLR}"
  ;;
esac
